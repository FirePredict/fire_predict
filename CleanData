import numpy as np
import pandas as pd
from sklearn import preprocessing
import seaborn as sns

import matplotlib.pyplot as plt
%matplotlib inline 

############################################ Lecture des fichiers ######################################
##################################### Préparation et analyse des données ###############################

mobilisation = pd.read_csv("LFB Mobilisation data Last 3 years.csv", header=0, sep=";");
incident = pd.read_csv("LFB Incident data Last 3 years.csv", header=0, sep=";");

total = pd.merge(incident, mobilisation, on='IncidentNumber')

total.head()
#total.info()
#total.describe()

######### Test de corrélation ##########
plt.figure(figsize=(16, 15))
#total.corr()
sns.heatmap(total.corr(), annot=True, cmap='RdBu_r', center=0);

######## Suppression des colonnes inutile pour l'analyse ##########
total.drop(["IncidentGroup","PropertyCategory","Postcode_full","UPRN","USRN","IncGeo_BoroughCode","ProperCase",
           "IncGeo_WardCode","IncGeo_WardName","Easting_m","Northing_m","Easting_rounded","Northing_rounded",
           "Latitude","Longitude","FRS","IncidentStationGround","FirstPumpArriving_AttendanceTime",
           "FirstPumpArriving_DeployedFromStation","SecondPumpArriving_AttendanceTime",
           "SecondPumpArriving_DeployedFromStation","NumStationsWithPumpsAttending","NumPumpsAttending",
           "PumpCount","PumpHoursRoundUp","Notional Cost (£)","CalYear_y","HourOfCall_y","ResourceMobilisationId",
           "PerformanceReporting","DateAndTimeMobilised","DateAndTimeMobile","DateAndTimeArrived","TurnoutTimeSeconds",
           "TravelTimeSeconds","DateAndTimeLeft","DateAndTimeReturned","DeployedFromStation_Code","PumpOrder",
           "PlusCode_Code","PlusCode_Description","DelayCodeId","DelayCode_Description"], axis=1, inplace=True)

total.head()

######## verification des Nan ########
total.isna().sum()
#SpecialServiceType          461656
#IncGeo_WardNameNew               1
#DeployedFromStation_Name        13
#DeployedFromLocation           336

total['SpecialServiceType']=total['SpecialServiceType'].fillna(total['StopCodeDescription'])
total.drop(['StopCodeDescription'], axis=1, inplace=True)

######### Suppression des NANs ##########
total = total.dropna()           # 338 lignes sur 587073 ( negligeable )

total.head()
#total.info()
#total.describe()

######### Test des lignes dupliquées ##########
#total.duplicated().sum()

# 6 lignes dupliquées à traiter

######### Conversion des colonnes Date de type Object en type Date ##########
total['DateOfCall'] = pd.to_datetime(total['DateOfCall'])

#total.info();
#total.head()

######### Création de la colonne 'dayOfWeek' de la semaine à partir de 'DateOfCall' ##########

total['dayOfWeek'] = total['DateOfCall'].dt.dayofweek

#total.head()

######### Création de la colonne 'month' à partir de 'DateOfCall' ##########

total['month'] = total['DateOfCall'].dt.month

#total.head()

######### Convertir les tables 'object' en table numerique ##########

# A faire
#["SpecialServiceType, "PropertyType", "AddressQualifier", "Postcode_district", "IncGeo_BoroughName", "IncGeo_WardNameNew", "Resource_Code", "DeployedFromLocation"]

total.head()

-----------

######### Test des lignes dupliquées ##########
#total.duplicated().sum()

######### Test des lignes et colonnes qui contiennent des NANs ##########
#colonnes_na = total.isna().any(axis = 0)
#print(colonnes_na.sum(), "colonnes de total contiennent des NANs. \n")

#lignes_na = total.isna().any(axis = 1)
#print(lignes_na.sum(), "lignes de total contiennent des NANs. \n")

#colonnes_nbna = total.isna().sum(axis = 0)
#print("La colonne contenant le plus de NANs est:", colonnes_nbna.idxmax())

######### Conversion des colonnes Date de type Object en type Date ##########
#total['DateOfCall'] = pd.to_datetime(total['DateOfCall'])
#total['DateAndTimeLeft'] = pd.to_datetime(total['DateAndTimeLef'])

#total.info();

######### Test de corrélation ##########
#plt.figure(figsize=(16, 15))
#sns.heatmap(total.corr(), annot=True, cmap='RdBu_r', center=0);
# On peut voir la forte corrélation entre les 2 variables "TravelTimeSeconds" et "AttendanceTimeSeconds" 
# ce qui permet de définir la variable "AttendanceTimeSeconds" comme cible

############ Pré-processing - Standardisation des données ###########
#scaler = preprocessing.StandardScaler().fit(total)
#total[total.columns] = pd.DataFrame(scaler.transform(total), index=total.index)

####################################################################################
####################################################################################
####################################################################################

################### Nombre d'intervention par type d'incident ####################
plt.figure(figsize=(15,16))
chart = sns.countplot(x='SpecialServiceType', data=total)
chart.set_xticklabels(chart.get_xticklabels(), rotation=90)
plt.show()

print('On constate que les fausses alertes représente un nombre important d\'incident !\nSuivis par les feux secondaires et les inondations !')

################### Nombre d'intervention par arrondissement ####################
plt.figure(figsize=(15,16))
chart = sns.countplot(x='IncGeo_BoroughName', data=total)
chart.set_xticklabels(chart.get_xticklabels(), rotation=90) 
plt.show()
print('On constate que l\'arrondissement de WESTMINSTER qui est le quartier le plus dynamique, le plus actif de Londres représente un nombre important d\'intervention!')

############# Type d'incident par arrondissement ###############
chart = sns.relplot(x='IncGeo_BoroughName', y='SpecialServiceType', height=12, ci=None, kind='line', data=total)
plt.xticks(rotation=90)
plt.show()

print('On peut constater que les incidents de l\'arrondissement de WESTMINSTER et CITY OF LONDON sont essentiellement des feux primaires et secondaires !')
print('On peut penser que les délais d\'interventions dans ces arrondissement peuvent être plus élevés en moyenne')
print('car ceux-ci sont trés dépendant du traffic routier et de l\'activité en journée et donc des heures dans la journée !')
print('De plus de part ce type d\'incident il est nécéssaire de déplacer des véhicules lourds !')
print('Or les casernes se trouvent assez proche de ces arrondissement donc le délai peut être raccourcis du fait de la proximité !')


############# Délai d'intervention par arrondissement ###############
plt.figure(figsize=(15,16))
sns.barplot(y=total['IncGeo_BoroughName'], x=total['AttendanceTimeSeconds'], color='red', orient='h');
print('On constate que l\'arrondissemnt d\'Hillingdon, qui se situe à L\'Ouest de Londres, représente le lieu ou les délais d\'intervention sont les plus longs!\nEt l\'arrondissement de Lambeth qui se situe en centre ville de Londres représente les délais les plus courts!')
print('Comme sur le graphe précédent on a observé que les incidents majeurs dans l\'arrondissement d\' Hillingdon était plutôt des fausses alertes')
print('On peut peut dire que les délais d\'interventions dans cet arrondissement sont liés plus à la distance de la plus proche caserne sur Londres que sur le type de véhicule à déplacer !')
print('Alors que pour l\'arrondissement de Lambeth on a observer que les incidents majeurs sont des feux mais la situation')
print('en centre ville proche des casernes permet de se rendre sur les lieux rapidement même en déplacant des véhicules lourds !')

############# Délai d'intervention en fonction du type d'incident ###############
chart = sns.relplot(x='SpecialServiceType', y='AttendanceTimeSeconds', height=12, ci=None, kind='line', data=total)
plt.xticks(rotation=90)
plt.show()
print('On constate que le type d\'incident \'Approvisionnement en Eau\' représente l\'indicent où les délais d\'interventiuon sont les plus longs!\'nPar contre le type d\'incident \'Enlèvement d\'objet aux personnes\' représente l\'incident où les délais sont les plus courts!')
print('On peut voir aussi que les incidents de type médicaux représente un délai d\'interventions relativement cours\nPar contre on constate que les délais se rallonge nettement lorsqu\'il s\'agit d\'incident de type Feu ou ascenceur bloqué!')
print('On peut conclure que les incidents où il est nécéssaire de faire intervenir des véhicules lourds avec du matériel importants\ncomme les camions citernes qui doivent intervenir sur des départs de feu ou les camions d\'approvisionnment en eau peuvent avoir des délais d\'interventions plus longs !')

############# Délai d'intervention en fonction de l'heure dans la journée ###############
sns.relplot(x='HourOfCall_x', y='AttendanceTimeSeconds', kind='line', data=total)

print('On peut voir que les délais d\'interventions sont rallongé en début de matinée et en fin de journée probablement à cause du nombre de véicule important à ces heures là.')
print('Cela est corrélé avec les départs le matin pour les personnes qui travaillent et les sorties de bureau en fin d\'aprés-midi !')

############# Délai d'intervention en fonction de l'heure dans la journée et par jour dans la semaine ###############

sns.relplot(x='HourOfCall_x', y='AttendanceTimeSeconds', kind='line', ci=None, hue='dayOfWeek', data=total)
print('On peut observer que pour tous les jours de la semaine la tendance reste la même sauf pour le weekend où les délais semblent être plus courts !')

################### Visuel sur les valeurs extrêmes et concentration des données ##############

sns.catplot(x='dayOfWeek', y='AttendanceTimeSeconds', kind='violin', data=total);
print('On observe un comportement similaire en fonction des jours de la semaine !')
print('Donc on peut conclure que les caractéristiques qui influent sur les délais d\'interventions sont semblables pour chaque jour de la semaine!')

############### Vue par quartier ################
g = sns.FacetGrid(total, row='IncGeo_BoroughName')
g.map(plt.scatter, 'dayOfWeek', 'AttendanceTimeSeconds', s=5, alpha=.5, color='red')

print('En observant tous ces graphes à ce stade on peut conclure en disant que les délais d\'intervention dépendent :')
print('De la distance du lieu de l\'incident par rapport aux casernes les plus proches.')
print('Du type d\'incident qui va déplacer des véhicules plus ou moins chargés donc plus lourds.')
print('De l\'heure de l\'incident dans la journée')
print('qui va impliqué le traffic routier et l\'activité du lieu où se trouve l\'incident.')

